<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel-Module on LeonHwang&#39;s Blogs</title>
    <link>https://le0nhwan9.github.io/tags/kernel-module/</link>
    <description>Recent content in Kernel-Module on LeonHwang&#39;s Blogs</description>
    <generator>Hugo 0.125.0-DEV</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 15 May 2024 23:22:40 +0800</lastBuildDate>
    <atom:link href="https://le0nhwan9.github.io/tags/kernel-module/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF Talk: 尝试 trace tailcall 程序？！</title>
      <link>https://le0nhwan9.github.io/post/ebpf-talk-92-try-trace-tailcall/</link>
      <pubDate>Wed, 15 May 2024 23:22:40 +0800</pubDate>
      <guid>https://le0nhwan9.github.io/post/ebpf-talk-92-try-trace-tailcall/</guid>
      <description>在 eBPF Talk: trace tailcall 程序？NO！ 里，我们知道 tailcall 程序是不能直接使用 fentry/fexit 进行 trace 的。 如果通过内核模块，使用比较 hack 的方式，能否 trace tailcall 程序呢？ TL;DR 能对静态 tailcall 进行 tra</description>
    </item>
    <item>
      <title>eBPF Talk: 在内核模块里运行 bpf 程序</title>
      <link>https://le0nhwan9.github.io/post/ebpf-talk-49-run-bpf-prog-in-kernel-module/</link>
      <pubDate>Sun, 31 Mar 2024 20:47:45 +0800</pubDate>
      <guid>https://le0nhwan9.github.io/post/ebpf-talk-49-run-bpf-prog-in-kernel-module/</guid>
      <description>在 Linux 内核模块里把玩 bpf map P.S. 旧文一篇，请笑纳。 参考 iptables-bpf 的源代码实现，尝试在自定义的内核模块里运行指定的 bpf 程序。 使用的 bpf 程序源代码： iptables-bpf 内核模块源代码</description>
    </item>
  </channel>
</rss>
