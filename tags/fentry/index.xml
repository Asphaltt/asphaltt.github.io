<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fentry on LeonHwang&#39;s Blogs</title>
    <link>https://asphaltt.github.io/tags/fentry/</link>
    <description>Recent content in Fentry on LeonHwang&#39;s Blogs</description>
    <generator>Hugo 0.125.0-DEV</generator>
    <language>zh</language>
    <copyright>Leon Hwang</copyright>
    <lastBuildDate>Mon, 16 Dec 2024 00:13:36 +0800</lastBuildDate>
    <atom:link href="https://asphaltt.github.io/tags/fentry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF Talk: 在 arm64 fentry 里手动做 backtrace</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-141-backtrace-on-arm64/</link>
      <pubDate>Mon, 16 Dec 2024 00:13:36 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-141-backtrace-on-arm64/</guid>
      <description>对于 fentry 程序而言，在 arm64 上做 backtrace 不像 x86 上那么简单；第一步找到可用的 frame pointer 就很费劲了。 毕竟，找到 frame pointer 之后，就可以通过 frame pointer 逐级回溯，找到调用者的 IP 和 FP</description>
    </item>
    <item>
      <title>eBPF Talk: 在 bpf 里将 fd 和 sock 关联起来</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-140-fd-socket/</link>
      <pubDate>Mon, 09 Dec 2024 00:24:48 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-140-fd-socket/</guid>
      <description>对于 socket 编程，在用户态看到的只能是 fd；而在内核态，大部分时候看到的是 sock。 fd 和 sock 之间的关系，是在内核态的 syscall 里建立的；所以，在 connect 和 accept 等 syscall 里</description>
    </item>
    <item>
      <title>eBPF Talk: tailcall 问题知多少</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-139-tailcall-issues/</link>
      <pubDate>Sun, 01 Dec 2024 23:58:54 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-139-tailcall-issues/</guid>
      <description>tailcall 是 v4.2 内核便已引入的一个特性，它允许一个 BPF 程序调用另一个程序，而无需返回原程序。 bpf: allow bpf programs to tail-call other bpf programs 然而，在 BPF 子系统不断地引入新特性的同时，t</description>
    </item>
    <item>
      <title>eBPF Talk: 使用 fentry 调试 tailcall BUG</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-138-debug-tailcall-bug-with-fentry/</link>
      <pubDate>Sun, 24 Nov 2024 23:13:45 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-138-debug-tailcall-bug-with-fentry/</guid>
      <description>最近，在上线 XDP 网关新版本的时候，触发了 v5.15 内核的一个 tailcall BUG，导致了一个很奇怪的问题：在一个 XDP 程序的 subprog 里，调用了 bpf_tail_call()</description>
    </item>
    <item>
      <title>eBPF Talk: trace tracepoint 程序</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-85-trace-tracepoint-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:38:55 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-85-trace-tracepoint-program/</guid>
      <description>此处指的是 trace tracepoint bpf 程序，而不是 trace tracepoint 事件。 eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace kprobe 程序 eBPF Talk: trace tracepoint 程序 trace tracepoint 程</description>
    </item>
    <item>
      <title>eBPF Talk: trace kprobe 程序</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-84-trace-kprobe-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:37:42 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-84-trace-kprobe-program/</guid>
      <description>此处指的是 trace kprobe bpf 程序，而不是 trace kprobe 事件。 eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace kprobe 程序 eBPF Talk: trace tracepoint 程序 trace kprobe 程</description>
    </item>
    <item>
      <title>eBPF Talk: trace tailcall 程序？NO！</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-83-trace-tailcall-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:34:32 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-83-trace-tailcall-program/</guid>
      <description>既然可以对 freplace 程序进行 trace，是否可以对 tailcall 程序进行 trace 呢？ eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace kprobe 程</description>
    </item>
    <item>
      <title>eBPF Talk: trace freplace 程序</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-82-trace-freplace-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:30:23 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-82-trace-freplace-program/</guid>
      <description>既然可以对 bpf2bpf 函数调用进行 trace，是否可以对 freplace 程序进行 trace 呢？ eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace</description>
    </item>
    <item>
      <title>eBPF Talk: trace bpf2bpf 函数调用</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-81-trace-bpf2bpf-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:28:58 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-81-trace-bpf2bpf-program/</guid>
      <description>如 trace XDP/tc-bpf 程序，bpf2bpf 函数调用也是可以被 trace 的。 eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace kprobe 程序 eBPF Talk: trace</description>
    </item>
    <item>
      <title>eBPF Talk: trace tc-bpf 程序</title>
      <link>https://asphaltt.github.io/post/ebpf-talk-80-trace-tc-bpf-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:18:37 +0800</pubDate>
      <guid>https://asphaltt.github.io/post/ebpf-talk-80-trace-tc-bpf-program/</guid>
      <description>如 eBPF Talk: trace XDP 程序，使用 bpf 也是能够对 tc-bpf 程序进行 trace 的。 eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace kprobe 程序 eBPF Talk: trace tracepoint</description>
    </item>
  </channel>
</rss>
