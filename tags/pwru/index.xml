<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwru on LeonHwang&#39;s Blogs</title>
    <link>https://blog.leonhw.com/tags/pwru/</link>
    <description>Recent content in Pwru on LeonHwang&#39;s Blogs</description>
    <generator>Hugo 0.125.0-DEV</generator>
    <language>zh</language>
    <copyright>Leon Hwang</copyright>
    <lastBuildDate>Sun, 09 Mar 2025 23:10:43 +0800</lastBuildDate>
    <atom:link href="https://blog.leonhw.com/tags/pwru/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF Talk: btrace v0.2.0 发布</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-146-btrace-v0.2.0/</link>
      <pubDate>Sun, 09 Mar 2025 23:10:43 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-146-btrace-v0.2.0/</guid>
      <description>btrace 是什么？btrace 是一款 bpf 时代的现代化内核函数动态追踪工具。 btrace 重命名自 bpflbr，参考 eBPF Talk: 使用 Last Branch Record 动态追踪内核函数，在 bpflbr v0.1.0 的基础上，</description>
    </item>
    <item>
      <title>eBPF Talk: 动态过滤函数参数</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-144-dynamic-filter-func-arg/</link>
      <pubDate>Sun, 09 Feb 2025 23:01:04 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-144-dynamic-filter-func-arg/</guid>
      <description>在使用 bpf 追踪内核函数的时候，通常需要对函数参数进行过滤。 如果使用 bpftrace，可以很方便地在脚本里指定过滤条件；但 bpftrace 依赖 LLVM，很多时</description>
    </item>
    <item>
      <title>eBPF Talk: 从一个 pwru issue 谈起</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-100-talk-from-a-pwru-issue/</link>
      <pubDate>Sun, 26 May 2024 15:35:08 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-100-talk-from-a-pwru-issue/</guid>
      <description>有位 pwru 的用户在 GitHub 上提了一个 issue，说 --filter-trace-tc 不能正常工作。 option &amp;ndash;filter-trace-tc not support 1 2 3 4 5 6 7 8 9 ...... ; event.addr = bpf_get_func_ip(ctx); 26: (bf) r1 = r6 27: R0=invP1 R1_w=ctx(id=0,off=0,imm=0) R6=ctx(id=0,off=0,imm=0) R7=ptr_sk_buff(id=0,off=0,imm=0) R10=fp0 fp-8=????mmmm fp-16=00000000 fp-24=00000000 fp-32=0mm0mmmm fp-40=mmmmmmmm fp-48=mmmmmmmm fp-56=mmmmmmmm fp-64=mmmmmmmm fp-72=00000000 fp-80=00000000 fp-88=00000000 fp-96=00000000 fp-104=mmmmmmmm</description>
    </item>
    <item>
      <title>eBPF Talk: 给 pwru 添砖加瓦</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-98-contribute-pwru/</link>
      <pubDate>Wed, 15 May 2024 23:38:29 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-98-contribute-pwru/</guid>
      <description>近来，没怎么学习 eBPF，就给 pwru 做下贡献。 Replace objs with collection Support tracing tc-bpf Support tracking skb clones Accelerate attaching/detaching kprobes WIP Replace objs with collection 该 PR 重构了一下 pwru 中管理 bpf 对象的代码，将 bpf 对象的管理从 struct 改成 c</description>
    </item>
    <item>
      <title>eBPF Talk: pwru 自己挖坑自己填</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-52-eat-dog-food-of-pwru/</link>
      <pubDate>Sun, 31 Mar 2024 21:16:34 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-52-eat-dog-food-of-pwru/</guid>
      <description>当遇上 cilium/pwru 时，我便放弃维护自己的 skbtracer 了。 挖坑 之前，学习了 eBPF Talk: 全局变量实战指南，就打算在开源项目 GitHub cilium/pwru 上一展身手： PR bpf: make config as a constant 2023 年 2 月 4 日提了 PR</description>
    </item>
  </channel>
</rss>
