<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tracepoint on LeonHwang&#39;s Blogs</title>
    <link>https://blog.leonhw.com/tags/tracepoint/</link>
    <description>Recent content in Tracepoint on LeonHwang&#39;s Blogs</description>
    <generator>Hugo 0.125.0-DEV</generator>
    <language>zh</language>
    <copyright>Leon Hwang</copyright>
    <lastBuildDate>Sun, 23 Mar 2025 22:54:19 +0800</lastBuildDate>
    <atom:link href="https://blog.leonhw.com/tags/tracepoint/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF Talk: tp_btf 经验分享</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-148-tp_btf/</link>
      <pubDate>Sun, 23 Mar 2025 22:54:19 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-148-tp_btf/</guid>
      <description>分享两条 bpfsnoop（emm 从 btrace 改名而来）使用 tp_btf 支持动态追踪 tracepoint 的经验。 如何确定 tracepoint 对应的参数？ 如何绕过 verifier 校验 tp_btf prog 的 BUG？ bpfsnoop 里的解法请参考</description>
    </item>
    <item>
      <title>eBPF Talk: tracepoint vs raw_tp/tp_btf vs kprobe vs fentry/fexit 静态地对比运行时性能</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-147-tracepoint-vs-raw_tp-tp_btf-vs-kprobe-vs-fentry-fexit/</link>
      <pubDate>Mon, 17 Mar 2025 00:25:07 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-147-tracepoint-vs-raw_tp-tp_btf-vs-kprobe-vs-fentry-fexit/</guid>
      <description>凑个热闹，静态地对比一下 tracepoint、raw_tp/tp_btf、kprobe 和 fentry/fexit 四种 bpf 动态追踪技术的运行时性能。 eBPF代码性能调</description>
    </item>
    <item>
      <title>eBPF Talk: 使用 tcpw 获取 curl 的五元组信息</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-142-tcpw-introduction/</link>
      <pubDate>Sun, 22 Dec 2024 21:29:52 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-142-tcpw-introduction/</guid>
      <description>在使用 curl、telnet 等工具排查问题的时候，如果想要知道当前的连接信息，在现有的工具集里，是没有办法直接获取的。 于是，我写了一个小工具</description>
    </item>
    <item>
      <title>eBPF Talk: introduce tracepoint</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-87-introduce-tracepoint/</link>
      <pubDate>Wed, 15 May 2024 23:15:33 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-87-introduce-tracepoint/</guid>
      <description>想弄清楚 tracepoint 的工作原理，实在太难了；网络上的资料比较少，而且不够深入，甚至是 kernel 文档。 Using the Linux Kernel Tracepoints 本文尝试从源代码的角度来分析 tracepoint 的工作原理。 抛砖引</description>
    </item>
    <item>
      <title>eBPF Talk: tracepoint __data_loc</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-86-tracepoint-__data_loc/</link>
      <pubDate>Fri, 05 Apr 2024 22:45:28 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-86-tracepoint-__data_loc/</guid>
      <description>书接上回：eBPF Talk: trace tracepoint 程序，本文将介绍在 bpf 里如何处理 tracepoint 中 __data_loc 描述的字段。 关于 tracepoint __data_loc 的资料超级少，网络上能找到的资料如下： tracepoint arguments are missing __data_loc char strings tracepoint: Support __data_loc fields</description>
    </item>
    <item>
      <title>eBPF Talk: trace tracepoint 程序</title>
      <link>https://blog.leonhw.com/post/ebpf-talk-85-trace-tracepoint-program/</link>
      <pubDate>Thu, 04 Apr 2024 22:38:55 +0800</pubDate>
      <guid>https://blog.leonhw.com/post/ebpf-talk-85-trace-tracepoint-program/</guid>
      <description>此处指的是 trace tracepoint bpf 程序，而不是 trace tracepoint 事件。 eBPF Talk: trace XDP 程序 eBPF Talk: trace tc-bpf 程序 eBPF Talk: trace bpf2bpf 函数调用 eBPF Talk: trace freplace 程序 eBPF Talk: trace tailcall 程序？NO！ eBPF Talk: trace kprobe 程序 eBPF Talk: trace tracepoint 程序 trace tracepoint 程</description>
    </item>
  </channel>
</rss>
