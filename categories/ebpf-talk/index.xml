<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eBPF Talk on LeonHwang&#39;s Blogs</title>
    <link>https://asphaltt.github.io/categories/ebpf-talk/</link>
    <description>Recent content in eBPF Talk on LeonHwang&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 21 Dec 2022 21:26:02 +0800</lastBuildDate><atom:link href="https://asphaltt.github.io/categories/ebpf-talk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF Talk: 两个简单好用的 map 处理函数</title>
      <link>https://asphaltt.github.io/post/ebpf-two-map-helpers/</link>
      <pubDate>Wed, 21 Dec 2022 21:26:02 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-two-map-helpers/</guid>
      <description>最近在用 eBPF 造轮子的时候，发现其中一个处理函数；而后，自己有样学样地封装了另外一个函数。 bpf_map_lookup_or_try_init 函数名称有点长。 该函数是用来查询某个 key 对应的 valu</description>
    </item>
    
    <item>
      <title>eBPF Talk: 此汇编非彼汇编</title>
      <link>https://asphaltt.github.io/post/ebpf-asm-and-insn/</link>
      <pubDate>Wed, 21 Dec 2022 21:20:30 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-asm-and-insn/</guid>
      <description>此汇编：在 C 代码里使用的 asm volatile 汇编代码。 彼汇编：eBPF verifier、JIT、runtime VM 等地方使用的汇编指令。 在文章 BPF 尾调用简介 里，</description>
    </item>
    
    <item>
      <title>eBPF Talk: eBPF 尾调用简介</title>
      <link>https://asphaltt.github.io/post/ebpf-tailcall-intro/</link>
      <pubDate>Thu, 24 Nov 2022 22:11:05 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-tailcall-intro/</guid>
      <description>在 bpf2bpf 特性简介 中提及到 bpf_tail_call()，我们就认真学习一下它吧。 bpf_tail_call 从 4.2 内核版本开始，eBPF 支持了尾调用特性。 该特性的主要特点是</description>
    </item>
    
    <item>
      <title>eBPF Talk: bpf2bpf 特性简介</title>
      <link>https://asphaltt.github.io/post/ebpf-bpf2bpf-functions-call/</link>
      <pubDate>Wed, 16 Nov 2022 22:32:06 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-bpf2bpf-functions-call/</guid>
      <description>最近才了解到 eBPF 里有 bpf2bpf 这个特性，故特意学习了一番。 bpf2bpf 简介 bpf2bpf 特性要求 4.16 内核版本，参考 BPF Features by Linux Kernel Version。 在 bpf2bpf 特性出现之前，eBPF 程序都要</description>
    </item>
    
    <item>
      <title>eBPF Talk: BPF map 趣事一则</title>
      <link>https://asphaltt.github.io/post/ebpf-a-bpf-map-story/</link>
      <pubDate>Sun, 13 Nov 2022 21:06:38 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-a-bpf-map-story/</guid>
      <description>有同事报告一个错误：lookup: cannot allocate memory，并请求如何解决。 lookup 项目中使用的 eBPF 库是 cilium/ebpf。查看一下 BPF map lookup 的源代码，如下</description>
    </item>
    
    <item>
      <title>eBPF Talk: 为当前内核提供外部 BTF 文件</title>
      <link>https://asphaltt.github.io/post/ebpf-external-btf/</link>
      <pubDate>Sun, 06 Nov 2022 21:42:05 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-external-btf/</guid>
      <description>最近系统地学习了 eBPF CO-RE（Compile Once, Run Everywhere，一次编译，到处运行），其中包括了 BTF。 BTF，BPF Type Format，</description>
    </item>
    
    <item>
      <title>eBPF Talk: 比 kprobe 更好的 trampoline</title>
      <link>https://asphaltt.github.io/post/ebpf-trampoline-better-than-kprobe/</link>
      <pubDate>Tue, 01 Nov 2022 23:31:04 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-trampoline-better-than-kprobe/</guid>
      <description>eBPF trampoline（trampoline：蹦床，翻译后并不好理解，所以不作翻译）是内核函数和 eBPF 程序之间的桥梁，基于 register_ftrace_direct() 实现。它实现了 kprobe/kretprobe 的功</description>
    </item>
    
    <item>
      <title>eBPF Talk: CPU and NUMA</title>
      <link>https://asphaltt.github.io/post/ebpf-cpu-and-numa/</link>
      <pubDate>Mon, 31 Oct 2022 19:26:29 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-cpu-and-numa/</guid>
      <description>在现代的服务器中，基本上 CPU 采用的都是多核 NUMA 架构。对于网络而言，一个网络包从物理网卡驱动出来之后，并到达对应的应用层 socket，最好都在同一</description>
    </item>
    
    <item>
      <title>eBPF Talk: 宏的两种写法</title>
      <link>https://asphaltt.github.io/post/ebpf-two-macros/</link>
      <pubDate>Sun, 30 Oct 2022 15:45:41 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-two-macros/</guid>
      <description>宏是 C 语言中最强大的语言特性，能够用来简化 eBPF 的 C 代码；毕竟 eBPF 的 C 代码是一种语法、语义都受限的 C 代码，不能像普通 C 代码那样“肆意妄为”。 写法一</description>
    </item>
    
    <item>
      <title>eBPF Talk: 变量声明的位置</title>
      <link>https://asphaltt.github.io/post/ebpf-variables-declaration-location/</link>
      <pubDate>Sat, 29 Oct 2022 15:03:41 +0800</pubDate>
      
      <guid>https://asphaltt.github.io/post/ebpf-variables-declaration-location/</guid>
      <description>据了解（未查证），从 clang12 开始，eBPF 代码中的变量声明不再要求写在函数体的最前方，而是可以按需声明并初始化。 写法一：一次性声明全部的变量 1 2 3</description>
    </item>
    
  </channel>
</rss>
